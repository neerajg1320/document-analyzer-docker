from django.contrib.auth import get_user_model
from django.urls import reverse
from django.test import TestCase

from rest_framework import status
from rest_framework.test import APIClient

from core.models import Extractor, Document

from extractor.serializers import ExtractorListSerializer, \
    ExtractorDetailSerializer, DocumentListSerializer, DocumentDetailSerializer

from extractor.text_routines import create_highlighted_text

sample_regex_str = r"""(?#
)(?P<trade_date>\d{2}\/\d{2}\/\d{2})(?:\s){1,2}(?#
)(?P<setl_date>\d{2}\/\d{2}\/\d{2})(?:\s){1,2}(?#
)(?P<mkt>[\w]+)(?:\s){1,2}(?#
)(?P<cap>[\w]+)(?:\s){1,2}(?#
)(?:(?P<symbol>[\w]+)(?:\s){1,2}(?#
))?(?# symbol/cusip is only for EQ
)(?P<trade_type>[\w]+)(?:\s){1,2}(?#
)(?P<trade_qty>[,.\-\d]+)(?:\s){1,2}(?#
)(?P<trade_rate>[\$,.\-\d]+)(?:\s){1,2}(?#
)(?P<acct_type>[\w]+)(?:\s){1,2}(?#
)(?P<marker_principal>PRINCIPAL)(?:\s){1,2}(?#
)(?P<principal>[\$,.\-\d]+)(?:\s){1,2}(?#
)(?:(?P<option>(?#
    )(?P<opt_type>CALL|PUT) (?#
    )(?P<opt_name>[\w]+) (?#
    )(?P<expiry_date>\d{2}\/\d{2}\/\d{2}) (?#
    )(?P<strike_price>[\$,.\-\d]+))(?#
)(?:\s){1,2})?(?#
)(?P<scrip_commission_fee>(?:.|\s)*?)(?:\s){1,2}(?#
)(?P<marker_net_amount>NET AMOUNT)(?:\s){1,2}(?#
)(?P<net_amount>[\$,.\-\d]+)(?:\s){1,2}(?#
)(?#
)"""

sample_document_str = r"""
E*TRADE Securities LLC
PO Box 484
Jersey City, NJ 07303-0484
DETACH HERE DETACH HERE
Make checks payable to E*TRADE Securities LLC.
Mail depositsto:
E TRADE
Please do not send cash Dollars Cents
TOTAL DEPOSIT
Tax questions? No problem. Get helpful tips, tools, and key dates in the Tax Center. Visit
etrade.com/tax today.
Account Name:
NEERAJ GUPTA
E TRADE Securities LLC
PO Box 484
Jersey City, NJ 07303-0484
1-800-ETRADE-1 (1-800-387-2331)
etrade.com
022220180001 900542174173
Account Number: XXXX-7417
Use This Deposit Slip Acct: XXXX-7417
Investment Account
NEERAJ GUPTA
39632 POTRERO DR
NEWARK CA 94560-5612
TRADE CONFIRMATION
Page 1 of 2
TRADE
DATE
SETL
DATE
MKT /
CPT
SYMBOL /
CUSIP
BUY /
SELL QUANTITY PRICE
ACCT
TYPE
02/22/18 02/26/18 6 1 P BUY 10,000 $4.3985 Margin PRINCIPAL $43,985.00
PANDORA MEDIA INC COMMISSION $3.95
NET AMOUNT $43,988.95
02/22/18 02/23/18 3 4 BUY 100 $.67 Margin PRINCIPAL $6,700.00
CALL SNAP 03/16/18 18 SNAP INC COMMISSION $23.50
OPEN CONTRACT OPT REG FEE $1.67
NET AMOUNT $6,725.17
02/22/18 02/23/18 3 4 BUY 100 $.70 Margin PRINCIPAL $7,000.00
CALL SNAP 03/16/18 19 SNAP INC COMMISSION $23.50
OPEN CONTRACT OPT REG FEE $1.67
NET AMOUNT $7,025.17
02/22/18 02/23/18 3 1 SELL 100 $.38 Margin PRINCIPAL $3,800.00
CALL SNAP 03/16/18 19 SNAP INC COMMISSION $23.50
CLOSING CONTRACT FINRA TAF
OPT REG FEE
FEE
$0.20
1.67
0.09
NET AMOUNT $3,774.54
02/22/18 02/23/18 3 1 SELL 100 $.40 Margin PRINCIPAL $4,000.00
CALL SNAP 03/16/18 20 SNAP INC COMMISSION $23.50
CLOSING CONTRACT FINRA TAF
OPT REG FEE
FEE
$0.20
1.67
0.10
NET AMOUNT $3,974.53
237 33936 PBA 1 31014 1 of 1 C EDLV AFPEDLV 22/02/18 23:52 001
NEERAJ GUPTA
39632 POTRERO DR
NEWARK CA 94560-5612
"""

sample_document_highlight_str = r"""<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n   \"http://www.w3.org/TR/html4/strict.dtd\">\n<!--\ngenerated by Pygments <http://pygments.org>\nCopyright 2006-2019 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n-->\n<html>\n<head>\n  <title>Erade Statement</title>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=None\">\n  <style type=\"text/css\">\n/*\ngenerated by Pygments <http://pygments.org>\nCopyright 2006-2019 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n*/\ntd.linenos { background-color: #f0f0f0; padding-right: 10px; }\nspan.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }\npre { line-height: 125%; }\nbody .hll { background-color: #ffffcc }\nbody  { background: #f0f0f0; }\nbody .c { color: #60a0b0; font-style: italic } /* Comment */\nbody .err { border: 1px solid #FF0000 } /* Error */\nbody .k { color: #007020; font-weight: bold } /* Keyword */\nbody .o { color: #666666 } /* Operator */\nbody .ch { color: #60a0b0; font-style: italic } /* Comment.Hashbang */\nbody .cm { color: #60a0b0; font-style: italic } /* Comment.Multiline */\nbody .cp { color: #007020 } /* Comment.Preproc */\nbody .cpf { color: #60a0b0; font-style: italic } /* Comment.PreprocFile */\nbody .c1 { color: #60a0b0; font-style: italic } /* Comment.Single */\nbody .cs { color: #60a0b0; background-color: #fff0f0 } /* Comment.Special */\nbody .gd { color: #A00000 } /* Generic.Deleted */\nbody .ge { font-style: italic } /* Generic.Emph */\nbody .gr { color: #FF0000 } /* Generic.Error */\nbody .gh { color: #000080; font-weight: bold } /* Generic.Heading */\nbody .gi { color: #00A000 } /* Generic.Inserted */\nbody .go { color: #888888 } /* Generic.Output */\nbody .gp { color: #c65d09; font-weight: bold } /* Generic.Prompt */\nbody .gs { font-weight: bold } /* Generic.Strong */\nbody .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\nbody .gt { color: #0044DD } /* Generic.Traceback */\nbody .kc { color: #007020; font-weight: bold } /* Keyword.Constant */\nbody .kd { color: #007020; font-weight: bold } /* Keyword.Declaration */\nbody .kn { color: #007020; font-weight: bold } /* Keyword.Namespace */\nbody .kp { color: #007020 } /* Keyword.Pseudo */\nbody .kr { color: #007020; font-weight: bold } /* Keyword.Reserved */\nbody .kt { color: #902000 } /* Keyword.Type */\nbody .m { color: #40a070 } /* Literal.Number */\nbody .s { color: #4070a0 } /* Literal.String */\nbody .na { color: #4070a0 } /* Name.Attribute */\nbody .nb { color: #007020 } /* Name.Builtin */\nbody .nc { color: #0e84b5; font-weight: bold } /* Name.Class */\nbody .no { color: #60add5 } /* Name.Constant */\nbody .nd { color: #555555; font-weight: bold } /* Name.Decorator */\nbody .ni { color: #d55537; font-weight: bold } /* Name.Entity */\nbody .ne { color: #007020 } /* Name.Exception */\nbody .nf { color: #06287e } /* Name.Function */\nbody .nl { color: #002070; font-weight: bold } /* Name.Label */\nbody .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */\nbody .nt { color: #062873; font-weight: bold } /* Name.Tag */\nbody .nv { color: #bb60d5 } /* Name.Variable */\nbody .ow { color: #007020; font-weight: bold } /* Operator.Word */\nbody .w { color: #bbbbbb } /* Text.Whitespace */\nbody .mb { color: #40a070 } /* Literal.Number.Bin */\nbody .mf { color: #40a070 } /* Literal.Number.Float */\nbody .mh { color: #40a070 } /* Literal.Number.Hex */\nbody .mi { color: #40a070 } /* Literal.Number.Integer */\nbody .mo { color: #40a070 } /* Literal.Number.Oct */\nbody .sa { color: #4070a0 } /* Literal.String.Affix */\nbody .sb { color: #4070a0 } /* Literal.String.Backtick */\nbody .sc { color: #4070a0 } /* Literal.String.Char */\nbody .dl { color: #4070a0 } /* Literal.String.Delimiter */\nbody .sd { color: #4070a0; font-style: italic } /* Literal.String.Doc */\nbody .s2 { color: #4070a0 } /* Literal.String.Double */\nbody .se { color: #4070a0; font-weight: bold } /* Literal.String.Escape */\nbody .sh { color: #4070a0 } /* Literal.String.Heredoc */\nbody .si { color: #70a0d0; font-style: italic } /* Literal.String.Interpol */\nbody .sx { color: #c65d09 } /* Literal.String.Other */\nbody .sr { color: #235388 } /* Literal.String.Regex */\nbody .s1 { color: #4070a0 } /* Literal.String.Single */\nbody .ss { color: #517918 } /* Literal.String.Symbol */\nbody .bp { color: #007020 } /* Name.Builtin.Pseudo */\nbody .fm { color: #06287e } /* Name.Function.Magic */\nbody .vc { color: #bb60d5 } /* Name.Variable.Class */\nbody .vg { color: #bb60d5 } /* Name.Variable.Global */\nbody .vi { color: #bb60d5 } /* Name.Variable.Instance */\nbody .vm { color: #bb60d5 } /* Name.Variable.Magic */\nbody .il { color: #40a070 } /* Literal.Number.Integer.Long */\n\n  </style>\n</head>\n<body>\n<h2>Erade Statement</h2>\n\n<div class=\"highlight\"><pre><span></span>18 SNAP INC COMMISSION $23.50\nOPEN CONTRACT OPT REG FEE $1.67\nNET AMOUNT $6,725.17\n02/22/18 02/23/18 3 4 BUY 100 $.70 Margin PRINCIPAL $7,000.00\nCALL SNAP 03/16/18 19 SNAP INC COMMISSION $23.50\nOPEN CONTRACT OPT REG FEE $1.67\nNET AMOUNT $7,025.17\n02/22/18 02/23/18 3 1 SELL 100 $.38 Margin PRINCIPAL $3,800.00\nCALL SNAP 03/16/18 19 SNAP INC COMMISSION $23.50\nCLOSING CONTRACT FINRA TAF\nOPT REG FEE\nFEE\n$0.20\n1.67\n0.09\nNET AMOUNT $3,774.54\n02/22/18 02/23/18 3 1 SELL 100 $.40 Margin PRINCIPAL $4,000.00\nCALL SNAP 03/16/18 20 SNAP INC COMMISSION $23.50\nCLOSING CONTRACT FINRA TAF\nOPT REG FEE\nFEE\n$0.20\n1.67\n0.10\nNET AMOUNT $3,974.53\n\f237 33936 PBA 1 31014 1 of 1 C EDLV AFPEDLV 22/02/18 23:52 001\nNEERAJ GUPTA\n39632 POTRERO DR\nNEWARK CA 94560-5612\n</pre></div>\n</body>\n</html>\n"""
reference_str = "https://regex101.com/r/IOOXNI/1"


EXTRACTOR_URL = reverse('extractor:extractor-list')


# Used for extractor testing
def basic_user(email="basic@abc.com", password="Basic123"):
    user = get_user_model().objects.create_user(email, password)
    user.is_staff = False
    return user


def staff_user(email="staff@abc.com", password="Staff123"):
    user = get_user_model().objects.create_user(email, password)
    user.is_staff = True
    return user


def sample_extractor(user, **params):
    """ Create and return a sample extractor """
    defaults = {
        'title': 'Sample Extractor',
        'institute_name': 'Etrade',
        'document_type': 'ContractNote',
        'regex_parser': sample_regex_str,
        'reference': reference_str,
    }
    defaults.update(params)

    return Extractor.objects.create(user=user, **defaults)


def sample_document(user, **params):
    """ Create and return a sample document """
    defaults = {
        'title': 'Sample Document',
        'institute_name': 'Etrade',
        'document_type': 'ContractNote',
        'text': sample_document_str,
    }
    defaults.update(params)

    return Document.objects.create(user=user, **defaults)


# List: /api/docminer/extractors/
# Detail: /api/docminer/extractors/<id>/
def extractor_detail_url(extractor_id):
    """ Return recipe details URL """
    return reverse('extractor:extractor-detail', args=[extractor_id])


# List: /api/docminer/documents/
# Detail: /api/docminer/documents/<id>/
# Highlight: /api/docminer/documents/<id>/highlight/
# Transactions: /api/docminer/documents/<id>/transactions/
def document_detail_url(document_id):
    """ Return recipe details URL """
    return reverse('extractor:document-detail', args=[document_id])


def document_detail_highlight_url(document_id):
    """ Return recipe details URL """
    return reverse('extractor:document-highlight', args=[document_id])


def document_detail_transactions_url(document_id):
    """ Return recipe details URL """
    return reverse('extractor:document-transactions', args=[document_id])


class PublicExtractorsApiTests(TestCase):
    """ Test the publicly available Extractor API """

    def setUp(self):
        self.client = APIClient()

    def test_auth_required(self):
        """ Test that login is required for retirieving tags """
        res = self.client.get(EXTRACTOR_URL)

        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)


class PrivateExtractorsApiTests(TestCase):
    """ Test the authenticated user Extractor API """

    def setUp(self):
        self.user = get_user_model().objects.create_user(
            'test@abc.com',
            'Test123',
        )
        self.client = APIClient()
        self.client.force_authenticate(self.user)

    def test_retrieve_extractors(self):
        """ Test retrieving a list of extractors """
        sample_extractor(user=self.user)
        sample_extractor(user=self.user)

        res = self.client.get(EXTRACTOR_URL)

        extractors = Extractor.objects.all().order_by('-id')
        serializer = ExtractorListSerializer(extractors, many=True)

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(res.data, serializer.data)

    def test_extractors_limited_to_authenticated_user(self):
        """" Test that extractors for authenticated user only are retrieved """
        user2 = get_user_model().objects.create_user(
            'second@abc.com',
            'Second123'
        )
        sample_extractor(user=user2)
        sample_extractor(user=user2)
        sample_extractor(user=self.user)
        sample_extractor(user=self.user)

        res = self.client.get(EXTRACTOR_URL)

        extractors = Extractor.objects.filter(user=self.user)
        serializer = ExtractorListSerializer(extractors, many=True)

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(len(res.data), 2)
        self.assertEqual(res.data, serializer.data)

    def test_view_extractor_detail(self):
        """ Test viewing a extractor detail """
        extractor = sample_extractor(user=self.user)

        url = extractor_detail_url(extractor.id)
        res = self.client.get(url)

        serializer = ExtractorDetailSerializer(extractor)
        self.assertEqual(res.data, serializer.data)

    def test_create_extractor(self):
        """ Test creating extractor """
        payload = {
            'title': 'Sample Extractor',
            'institute_name': 'Big Institute',
            'document_type': 'Ledger Statement',
            'regex_parser': sample_regex_str,
            'reference': reference_str
        }
        res = self.client.post(EXTRACTOR_URL, payload)

        self.assertEqual(res.status_code, status.HTTP_201_CREATED)
        extractor = Extractor.objects.get(id=res.data['id'])

        for key in payload.keys():
            self.assertEqual(payload[key], getattr(extractor, key))

    def test_create_extractor_invalid(self):
        """ Test creating extractor: should fail with missing regex_parser """
        payload = {
            'title': 'Sample Extractor',
            'institute_name': 'Big Institute',
            'document_type': 'Ledger Statement',
            'reference': reference_str
        }
        res = self.client.post(EXTRACTOR_URL, payload)

        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_partial_update_extractor(self):
        """ Test updating a extractor with patch """
        extractor = sample_extractor(user=self.user)

        payload = {
            'title': 'Modified Extractor',
            'institute_name': 'Optionshouse'
        }

        res = self.client.patch(extractor_detail_url(extractor.id), payload)

        extractor.refresh_from_db()

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(extractor.title, payload['title'])
        self.assertEqual(extractor.institute_name, payload['institute_name'])

    def disabled_test_partial_update_extractor_invalid(self):
        """ Test updating a extractor with patch
            We should not allow blank regex
            We should not alllow a malformed regex
        """
        extractor = sample_extractor(user=self.user)

        payload = {
            'title': 'Modified Extractor',
            'regex_parser': ''
        }

        res = self.client.patch(extractor_detail_url(extractor.id), payload)

        extractor.refresh_from_db()

        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_view_document_detail_highlight(self):
        """ Test viewing a document detail """
        document = sample_document(user=self.user)

        url = document_detail_highlight_url(document.id)
        res = self.client.get(url)

        # Refresh the document since document.highlight would have been created
        document.refresh_from_db()
        self.assertEqual(res.data, document.highlighted)

    def test_text_mining_tuples_str(self):
        """ Test mining of transactions from text using a regex """

        extractor = sample_extractor(user=self.user)

        document = sample_document(user=self.user)
        
        url = document_detail_transactions_url(document.id)
        print(url)
        res = self.client.get(url)
        print(res.data)

        # Refresh the document since document.transactions would have been created
        document.refresh_from_db()
        highlighted_transactions_text = create_highlighted_text(document.transactions, title="Transactions")
        self.assertEqual(res.data, highlighted_transactions_text)